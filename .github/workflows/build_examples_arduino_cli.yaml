name: Build Examples with Arduino CLI

# Triggers the workflow on push or pull request events
on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip')"

    strategy:
      fail-fast: false
      matrix:
        example:
          [
            single_sensor,
            simple_logging,
            simple_logging_LearnEnviroDIY,
            DRWI_NoCellular,
            DRWI_2G,
            DRWI_DigiLTE,
            DRWI_SIM7080LTE,
            DRWI_Mayfly1,
            DRWI_Mayfly1_WiFi,
            double_logger,
            baro_rho_correction,
            data_saving,
            logging_to_MMW,
            logging_to_ThingSpeak,
          ]
        # arduino-platform: ['EnviroDIY:avr', 'arduino:avr', 'arduino:samd', 'adafruit:samd']
        fqbn:
          [
            'EnviroDIY:avr:envirodiy_mayfly',
            'arduino:avr:mega',
            'arduino:samd:mzero_bl',
            'adafruit:samd:adafruit_feather_m0',
            'SODAQ:samd:sodaq_autonomo',
          ]

    name: ${{ matrix.example }} - ${{ matrix.fqbn }}

    steps:
      - uses: actions/checkout@v3

      - name: Set environment variable for library installation source
        run: |
          if [[ -z "${GITHUB_HEAD_REF}" ]]; then
            echo "::debug::Push to commit ${GITHUB_SHA}"
            echo "LIBRARY_INSTALL_ZIP=https://github.com/${GITHUB_REPOSITORY}/archive/${GITHUB_SHA}.zip" >> $GITHUB_ENV
          else
            echo "::debug::Pull Request from the ${GITHUB_HEAD_REF} branch"
            echo "LIBRARY_INSTALL_ZIP=https://github.com/${GITHUB_REPOSITORY}/archive/${GITHUB_HEAD_REF}.zip" >> $GITHUB_ENV
          fi

      # We use the `arduino/setup-arduino-cli` action to install and
      # configure the Arduino CLI on the system.
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v1.1.1

      - name: Restore Arduino Platforms and Libraries
        uses: actions/cache@v3
        id: cache_arduino
        with:
          path: home/arduino
          # if nothing in the dependencies.json file has changed, then it will
          # be a "cache hit" and we can restore libraries from cache and not
          # download them.  If it has changed we have to re-download.
          key: ${{ hashFiles('./continuous_integration/dependencies.json') }}

      # Install cores and library dependencies for the Arduino CLI, iff no cache
      - name: Install the Arduino libraries
        if: steps.cache_arduino.outputs.cache-hit != 'true'
        run: |
          chmod +x continuous_integration/install-deps-arduino-cli.sh
          sh continuous_integration/install-deps-arduino-cli.sh

      # Install ModularSensors for the Arduino CLI
      - name: Install the testing version of Modular Sensors for the Arduino CLI
        run: |
          chmod +x continuous_integration/install-test-version-arduino-cli.sh
          sh continuous_integration/install-test-version-arduino-cli.sh

      - name: Set appropriate build flags for Arduino CLI
        run: |
          echo "::group::Setting build flags"
          echo "::debug::Setting build flags for ${{ matrix.fqbn }}"
          if [ ${{ matrix.fqbn }} = 'EnviroDIY:avr:envirodiy_mayfly' ]; then
            echo "EXTRA_BUILD_FLAGS=-DNEOSWSERIAL_EXTERNAL_PCINT" >> $GITHUB_ENV
          fi
          if [ ${{ matrix.fqbn }} = 'arduino:avr:mega' ]; then
            echo "EXTRA_BUILD_FLAGS=-DNEOSWSERIAL_EXTERNAL_PCINT" >> $GITHUB_ENV
          fi
          if [ ${{ matrix.fqbn }} = 'arduino:samd:mzero_bl' ]; then
            echo "EXTRA_BUILD_FLAGS=-DNEOSWSERIAL_EXTERNAL_PCINT -DARDUINO_SAMD_ZERO -D__SAMD21G18A__ -DUSB_VID=0x2341 -DUSB_PID=0x804d -DUSBCON" >> $GITHUB_ENV
          fi
          if [ ${{ matrix.fqbn }} = 'adafruit:samd:adafruit_feather_m0' ]; then
            echo "EXTRA_BUILD_FLAGS=-DNEOSWSERIAL_EXTERNAL_PCINT -DARDUINO_SAMD_ZERO -DARM_MATH_CM0PLUS -DADAFRUIT_FEATHER_M0 -D__SAMD21G18A__ -DUSB_VID=0x239A -DUSB_PID=0x800B -DUSBCON -DUSB_CONFIG_POWER=100" >> $GITHUB_ENV
          fi
          if [ ${{ matrix.fqbn }} = 'SODAQ:samd:sodaq_autonomo' ]; then
            echo "EXTRA_BUILD_FLAGS=-DNEOSWSERIAL_EXTERNAL_PCINT -DVERY_LOW_POWER -D__SAMD21J18A__ -DUSB_VID=0x2341 -DUSB_PID=0x804d -DUSBCON" >> $GITHUB_ENV
          fi
          echo "::endgroup::"

      - name: Compile examples using the Arduino CLI
        env:
          BUILD_EXAMPLE: ${{ format('examples/{0}/', matrix.example) }}
        run: |
          echo "::debug::Running Arduino CLI for ${{ format('examples/{0}/', matrix.example) }}"
          arduino-cli --config-file continuous_integration/arduino_cli.yaml compile --clean --build-property "build.extra_flags=$EXTRA_BUILD_FLAGS" --fqbn ${{ matrix.fqbn }} $BUILD_EXAMPLE
          echo "${{ matrix.example }} - ${{ matrix.fqbn }} SUCCESSFULLY COMPILED" >> $GITHUB_STEP_SUMMARY

      - name: Uninstall testing version of Modular Sensors before caching
        run: arduino-cli --config-file continuous_integration/arduino_cli.yaml lib uninstall ModularSensors
