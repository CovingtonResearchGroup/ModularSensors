name: Build Examples with PlatformIO

# Triggers the workflow on push or pull request events
on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip')"

    strategy:
      fail-fast: false
      matrix:
        example:
          [
            single_sensor,
            simple_logging,
            simple_logging_LearnEnviroDIY,
            DRWI_NoCellular,
            DRWI_2G,
            DRWI_DigiLTE,
            DRWI_SIM7080LTE,
            DRWI_Mayfly1,
            DRWI_Mayfly1_WiFi,
            double_logger,
            baro_rho_correction,
            data_saving,
            logging_to_MMW,
            logging_to_ThingSpeak,
          ]
        pio_environment: [mayfly, mega, arduino_zero, adafruit_feather_m0, autonomo]

    name: ${{ matrix.example }} - ${{ matrix.pio_environment }}

    steps:
      - uses: actions/checkout@v3

      - name: Set environment variable for library installation source
        run: |
          if [[ -z "${GITHUB_HEAD_REF}" ]]; then
            echo "::debug::Push to commit ${GITHUB_SHA}"
            echo "LIBRARY_INSTALL_SOURCE=https://github.com/${GITHUB_REPOSITORY}.git#${GITHUB_SHA}" >> $GITHUB_ENV
          else
            echo "::debug::Pull Request from the ${GITHUB_HEAD_REF} branch"
            echo "LIBRARY_INSTALL_SOURCE=https://github.com/${GITHUB_REPOSITORY}.git#${GITHUB_HEAD_REF}" >> $GITHUB_ENV
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      - name: Restore PlatformIO Platforms and Libraries
        uses: actions/cache@v3
        id: cache_libraries
        with:
          path: ~/.platformio
          # if nothing in the dependencies.json file has changed, then it will
          # be a "cache hit" and we can restore libraries from cache and not
          # download them.  If it has changed we have to re-download.
          key: ${{ hashFiles('./continuous_integration/dependencies.json') }}

      # Install the dependencies for PlatformIO
      - name: Install the PlatformIO dependencies at global level
        if: steps.cache_libraries.outputs.cache-hit != 'true'
        run: |
          chmod +x continuous_integration/install-deps-platformio.sh
          sh continuous_integration/install-deps-platformio.sh

      # Install ModularSensors at the Global level for PlatformIO
      # Force install to get the right version
      - name: Install the testing version of Modular Sensors for PlatformIO
        run: |
          pio pkg install -g --library -f ${{ env.LIBRARY_INSTALL_SOURCE }}
          pio pkg show EnviroDIY_ModularSensors

      - name: Run PlatformIO
        env:
          PLATFORMIO_CI_SRC: ${{ format('examples/{0}/', matrix.example) }}
          PLATFORMIO_DEFAULT_ENVS: ${{ matrix.pio_environment}}
          PLATFORMIO_LIB_EXTRA_DIRS: /home/runner/.platformio/lib
        run: |
          echo "::debug::Running PlatformIO for ${{ format('examples/{0}/', matrix.example) }}"
          echo "${{ env.LIBRARY_INSTALL_SOURCE }}"
          pio ci --project-conf="continuous_integration/platformio.ini"
          echo "${{ matrix.example }} - ${{ matrix.pio_environment }} SUCCESSFULLY COMPILED" >> $GITHUB_STEP_SUMMARY

      # NOTE:  Don't uninstall for PlatformIO because the library manager will clean up the
      # dependencies leaving nothing for the cache
      # - name: Uninstall testing version of Modular Sensors before caching
      #   run: pio pkg uninstall --library -g EnviroDIY_ModularSensors
